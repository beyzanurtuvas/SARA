#include "ALACAKART.h"
#include <SPI.h>
#include <SD.h>

ALACA_KART Veri_Kontrol;
File Veri;

// Sabitler
const int CS_SD = PA4;
const int SERVO_NEUTRAL = 90;
const int SERVO_LEFT = 45;
const int SERVO_RIGHT = 135;
const int MOTOR_RUN_PWM = 2000;
const int MOTOR_STOP_PWM = 1490;
const int MOTOR_LOW_PWM = 1600;

// PID Sabitleri
float Kp_yaw = 1.2, Ki_yaw = 0.0, Kd_yaw = 0.5;
float Kp_pitch = 1.2, Ki_pitch = 0.0, Kd_pitch = 0.5;

// PID Degiskenleri
float yaw_integral = 0, yaw_last_error = 0;
float pitch_integral = 0, pitch_last_error = 0;

unsigned long oncekiZaman = 0;

// Motor PWM’ini kademeli artir
void motorYavasArtir(int baslangicPWM, int hedefPWM) {
  for (int pwm = baslangicPWM; pwm <= hedefPWM; pwm += 2) {
    Veri_Kontrol.Servo_1(pwm);
    delay(10);
  }
}

// Motor PWM’ini kademeli azalt
void motorYavasAzalt(int baslangicPWM, int hedefPWM) {
  for (int pwm = baslangicPWM; pwm >= hedefPWM; pwm -= 2) {
    Veri_Kontrol.Servo_1(pwm);
    delay(10);
  }
}

void tumServolariNotrle() {
  Veri_Kontrol.Servo_2_Write(SERVO_NEUTRAL);
  Veri_Kontrol.Servo_3_Write(SERVO_NEUTRAL);
  Veri_Kontrol.Servo_4_Write(SERVO_NEUTRAL);
  Veri_Kontrol.Servo_5_Write(SERVO_NEUTRAL);
}

void setup() {
  Serial.begin(57600);
  Veri_Kontrol.Sensor_begin();

  Veri_Kontrol.Servo_1_begin();
  Veri_Kontrol.Servo_2_begin();
  Veri_Kontrol.Servo_3_begin();
  Veri_Kontrol.Servo_4_begin();
  Veri_Kontrol.Servo_5_begin();

  SPI.begin();
  if (SD.begin(CS_SD)) {
    Veri = SD.open("Veriler.csv", FILE_WRITE);
    if (Veri) {
      Veri.println("Time_ms,Pitch,Pitch_Target,Pitch_Error,Pitch_Output,Yaw,Yaw_Target,Yaw_Error,Yaw_Output");
    }
  }

  oncekiZaman = millis();
}

void loop() {
  for (int i = 0; i < 3; i++) {
    // 0-10 sn: Bekleme
    Veri_Kontrol.Servo_1(MOTOR_STOP_PWM);
    delay(10000);

    // 10-12 sn: Motor yavas calisir
    motorYavasArtir(MOTOR_STOP_PWM, MOTOR_RUN_PWM);

    // 12-14 sn: 2 saniye duz git
    Veri_Kontrol.Servo_1(MOTOR_RUN_PWM);
    tumServolariNotrle();
    delay(2000);

    // 14-15 sn: Yavas yavas dur
    motorYavasAzalt(MOTOR_RUN_PWM, MOTOR_STOP_PWM);

    // 15-16 sn: Saga donmeye hazirlan
    motorYavasArtir(MOTOR_STOP_PWM, MOTOR_RUN_PWM);

    // 16-21 sn: 5 saniye saga don
    Veri_Kontrol.Servo_1(MOTOR_RUN_PWM);
    Veri_Kontrol.Servo_3_Write(SERVO_LEFT);
    Veri_Kontrol.Servo_5_Write(SERVO_RIGHT);
    delay(5000);

    // 21-22 sn: Durdur
    motorYavasAzalt(MOTOR_RUN_PWM, MOTOR_STOP_PWM);

    // 22-23 sn: Sola donmeye hazirlan
    motorYavasArtir(MOTOR_STOP_PWM, MOTOR_RUN_PWM);

    // 23-28 sn: 5 saniye sola don
    Veri_Kontrol.Servo_1(MOTOR_RUN_PWM);
    Veri_Kontrol.Servo_3_Write(SERVO_RIGHT);
    Veri_Kontrol.Servo_5_Write(SERVO_LEFT);
    delay(5000);

    // 28-29 sn: Durdur
    motorYavasAzalt(MOTOR_RUN_PWM, MOTOR_STOP_PWM);

    // 29-36 sn: PID destekli yunuslama
    motorYavasArtir(MOTOR_STOP_PWM, MOTOR_RUN_PWM);
    unsigned long baslangic = millis();
    while (millis() - baslangic < 7000) {
      unsigned long simdi = millis();
      float dt = (simdi - oncekiZaman) / 1000.0;
      oncekiZaman = simdi;

      float pitch = Veri_Kontrol.Euler_Y();
      float yaw = Veri_Kontrol.Euler_Z();
      float pitch_target = (millis() - baslangic < 3500) ? 10 : -10;
      float yaw_target = 0;

      float pitch_error = pitch_target - pitch;
      pitch_integral += pitch_error * dt;
      float pitch_derivative = (pitch_error - pitch_last_error) / dt;
      float pitch_output = Kp_pitch * pitch_error + Ki_pitch * pitch_integral + Kd_pitch * pitch_derivative;
      pitch_output = constrain(pitch_output, -45, 45);
      pitch_last_error = pitch_error;

      float yaw_error = yaw_target - yaw;
      yaw_integral += yaw_error * dt;
      float yaw_derivative = (yaw_error - yaw_last_error) / dt;
      float yaw_output = Kp_yaw * yaw_error + Ki_yaw * yaw_integral + Kd_yaw * yaw_derivative;
      yaw_output = constrain(yaw_output, -45, 45);
      yaw_last_error = yaw_error;

      Veri_Kontrol.Servo_2_Write(SERVO_NEUTRAL + pitch_output);
      Veri_Kontrol.Servo_4_Write(SERVO_NEUTRAL - pitch_output);
      Veri_Kontrol.Servo_3_Write(SERVO_NEUTRAL + yaw_output);
      Veri_Kontrol.Servo_5_Write(SERVO_NEUTRAL - yaw_output);
      Veri_Kontrol.Servo_1(MOTOR_RUN_PWM);

      if (Veri) {
        Veri.print(simdi); Veri.print(",");
        Veri.print(pitch); Veri.print(",");
        Veri.print(pitch_target); Veri.print(",");
        Veri.print(pitch_error); Veri.print(",");
        Veri.print(pitch_output); Veri.print(",");
        Veri.print(yaw); Veri.print(",");
        Veri.print(yaw_target); Veri.print(",");
        Veri.print(yaw_error); Veri.print(",");
        Veri.println(yaw_output);
      }
      delay(100);
    }

    // Sistem durdurulur
    motorYavasAzalt(MOTOR_RUN_PWM, MOTOR_STOP_PWM);
    tumServolariNotrle();
  }

  if (Veri) Veri.close();
  Serial.println(">>> 3 döngü başarıyla tamamlandı.");
  while (true);
}

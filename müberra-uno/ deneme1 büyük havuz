#include <Servo.h>

// Servo nesneleri
Servo servo1; // ESC (itici motor)
Servo servo2; // pitch kontrol (aÅŸaÄŸÄ±-yukarÄ±)
Servo servo3; // yaw kontrol (saÄŸ)
Servo servo4; // pitch kontrol (aÅŸaÄŸÄ±-yukarÄ± - ters)
Servo servo5; // yaw kontrol (sol)

// LED pin
const int ledPin = 13;

// GÃ¶rev zamanlarÄ± (ms)
const unsigned long BEKLEME_SURESI       = 7000;
const unsigned long DALIS_SURESI         = 3000;
const unsigned long DUZ_GITME_1          = 5000;
const unsigned long SAGA_DONUS           = 3000;
const unsigned long DUZ_GITME_2          = 5000;
const unsigned long SOLA_DONUS           = 3000;
const unsigned long DUZ_GITME_3          = 5000;
const unsigned long YUKARI_CIKIS         = 3000;
const unsigned long RASTGELE_MANEVRA     = 60000;

void setup() {
  // Servo pinleri
  servo1.attach(3);  // ESC (itici)
  servo2.attach(5);  // aÅŸaÄŸÄ±/yukarÄ±
  servo3.attach(6);  // saÄŸ/sol
  servo4.attach(9);  // ters aÅŸaÄŸÄ±/yukarÄ±
  servo5.attach(10); // ters saÄŸ/sol

  // LED
  pinMode(ledPin, OUTPUT);

  // BaÅŸlangÄ±Ã§ konumu - nÃ¶tr
  servo1.writeMicroseconds(1000);  // ESC min
  servo2.write(90);
  servo3.write(90);
  servo4.write(90);
  servo5.write(90);

  delay(1000); // Stabilize bekleme

  // BaÅŸlÄ±yoruz ğŸš€
  bekleVeBasla();
}

void loop() {
  // 1. DalÄ±ÅŸ
  dalisYap();

  // 2. 5 sn dÃ¼z git
  ileriGit(DUZ_GITME_1);

  // 3. SaÄŸa 90Â° dÃ¶nÃ¼ÅŸ
  sagaDon();

  // 4. 5 sn dÃ¼z git
  ileriGit(DUZ_GITME_2);

  // 5. Sola 90Â° dÃ¶nÃ¼ÅŸ
  solaDon();

  // 6. 5 sn dÃ¼z git
  ileriGit(DUZ_GITME_3);

  // 7. 20 cm yukarÄ± Ã§Ä±kma (zamanla simÃ¼lasyon)
  yukariCik();

  // 8. Rastgele manevra
  rastgeleManevra();

  // 9. YÃ¼zeye Ã§Ä±kÄ±ÅŸ â†’ LED â†’ sistem durdur
  yuzeyeCik();
  while (true); // sistem burada durur
}

// GÃ¶rev fonksiyonlarÄ±

void bekleVeBasla() {
  delay(BEKLEME_SURESI);
}

void dalisYap() {
  servo2.write(60); // pitch aÅŸaÄŸÄ±
  servo4.write(120);
  motorCalistir();
  delay(DALIS_SURESI);
  servolariNol();
}

void ileriGit(unsigned long sure) {
  motorCalistir();
  delay(sure);
  motorDur();
}

void sagaDon() {
  servo3.write(60);  // saÄŸa dÃ¶nÃ¼ÅŸ
  servo5.write(120); // zÄ±t
  motorYavasCalistir();
  delay(SAGA_DONUS);
  servolariNol();
}

void solaDon() {
  servo3.write(120); // sola dÃ¶nÃ¼ÅŸ
  servo5.write(60);  // zÄ±t
  motorYavasCalistir();
  delay(SOLA_DONUS);
  servolariNol();
}

void yukariCik() {
  servo2.write(120); // pitch yukarÄ±
  servo4.write(60);
  motorCalistir();
  delay(YUKARI_CIKIS);
  servolariNol();
}

void rastgeleManevra() {
  unsigned long basla = millis();
  while (millis() - basla < RASTGELE_MANEVRA) {
    servo2.write(random(70, 110));
    servo4.write(180 - servo2.read());
    servo3.write(random(70, 110));
    servo5.write(180 - servo3.read());
    motorCalistir();
    delay(800);
  }
  servolariNol();
}

void yuzeyeCik() {
  motorDur();
  digitalWrite(ledPin, HIGH);
}

// YardÄ±mcÄ±lar

void motorCalistir() {
  servo1.writeMicroseconds(1400); // orta hÄ±z
}

void motorYavasCalistir() {
  servo1.writeMicroseconds(1300); // dÃ¼ÅŸÃ¼k hÄ±z
}

void motorDur() {
  servo1.writeMicroseconds(1000); // ESC dur
}

void servolariNol() {
  servo2.write(90);
  servo3.write(90);
  servo4.write(90);
  servo5.write(90);
}

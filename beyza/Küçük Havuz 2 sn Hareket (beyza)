#include "ALACAKART.h"
#include <SPI.h>
#include <SD.h>
#include <PID_v1.h>
#include <MadgwickAHRS.h>

ALACA_KART Veri_Kontrol;
Madgwick filter;
File Veri;

const int CS_SD = PA4;
const int SERVO_NEUTRAL = 90;
const int SERVO_LEFT = 60;
const int SERVO_RIGHT = 120;
const int MOTOR_RUN_PWM = 1000;  // Max hız
const int MOTOR_STOP_PWM = 1490; // Durdurma PWM'i

unsigned long start_time = 0;
unsigned long prev_maneuver_time = 0;
unsigned long last_log_time = 0;

int hareket_durumu = 0; // 0: düz, 1: sağ, 2: sol

void setup() {
  Serial.begin(57600);
  Veri_Kontrol.Sensor_begin();

  // Servo motorlar başlatılıyor
  Veri_Kontrol.Servo_1_begin(); // ESC
  Veri_Kontrol.Servo_2_begin(); // Roll sol
  Veri_Kontrol.Servo_3_begin(); // Pitch ön
  Veri_Kontrol.Servo_4_begin(); // Roll sağ
  Veri_Kontrol.Servo_5_begin(); // Pitch arka

  // ESC yavaş başlatma
  Serial.println(">>> ESC PWM yavaşça artırılıyor...");
  for (int pwm = 1490; pwm <= MOTOR_RUN_PWM; pwm += 2) {
    Veri_Kontrol.Servo_1(pwm);
    delay(10);
  }

  // SD Kart başlatma
  SPI.begin();
  if (SD.begin(CS_SD)) {
    Serial.println("SD Kart Başlatıldı.");
    Veri = SD.open("Veriler.txt", FILE_WRITE);
    if (Veri) Veri.println("Zaman,Yaw,Pitch,Roll");
  } else {
    Serial.println("SD Kart Başlatılamadı!");
  }

  start_time = millis();
  prev_maneuver_time = start_time + 10000; // 10s sonra yön değişiklikleri başlasın
}

void loop() {
  unsigned long now = millis();
  float gecen_sure = (now - start_time) / 1000.0;

  // IMU Verileri okuma ve Madgwick filtre ile yönelim hesaplama
  float ax = Veri_Kontrol.LIA_ACC_X();
  float ay = Veri_Kontrol.LIA_ACC_Y();
  float az = Veri_Kontrol.LIA_ACC_Z();
  float gx = Veri_Kontrol.GYRO_X();
  float gy = Veri_Kontrol.GYRO_Y();
  float gz = Veri_Kontrol.GYRO_Z();

  filter.updateIMU(gx, gy, gz, ax, ay, az);
  float roll = filter.getRoll();
  float pitch = filter.getPitch();
  float yaw = filter.getYaw();

  // İlk 10 saniye bekleme (motor kapalı)
  if (now - start_time < 10000) {
    Veri_Kontrol.Servo_1(MOTOR_STOP_PWM);
    Veri_Kontrol.Servo_3_Write(SERVO_NEUTRAL);
    Veri_Kontrol.Servo_5_Write(SERVO_NEUTRAL);
    Veri_Kontrol.Servo_2_Write(SERVO_NEUTRAL);
    Veri_Kontrol.Servo_4_Write(SERVO_NEUTRAL);
  } else {
    // ESC’ye sabit PWM gönder (motor aktif)
    Veri_Kontrol.Servo_1(MOTOR_RUN_PWM);

    // Her 2 saniyede bir yön değiştir
    if (now - prev_maneuver_time >= 2000) {
      prev_maneuver_time = now;
      hareket_durumu = (hareket_durumu + 1) % 3;
    }

    switch (hareket_durumu) {
      case 0:
        Veri_Kontrol.Servo_3_Write(SERVO_NEUTRAL);
        Veri_Kontrol.Servo_5_Write(SERVO_NEUTRAL);
        break;
      case 1:
        Veri_Kontrol.Servo_3_Write(SERVO_LEFT);
        Veri_Kontrol.Servo_5_Write(SERVO_RIGHT);
        break;
      case 2:
        Veri_Kontrol.Servo_3_Write(SERVO_RIGHT);
        Veri_Kontrol.Servo_5_Write(SERVO_LEFT);
        break;
    }

    Veri_Kontrol.Servo_2_Write(SERVO_NEUTRAL);
    Veri_Kontrol.Servo_4_Write(SERVO_NEUTRAL);
  }

  // 2 dakika (120s) sonunda sistem durdurulur
  if (gecen_sure >= 130) {
    Veri_Kontrol.Servo_1(MOTOR_STOP_PWM);
    Veri_Kontrol.Servo_2_Write(SERVO_NEUTRAL);
    Veri_Kontrol.Servo_3_Write(SERVO_NEUTRAL);
    Veri_Kontrol.Servo_4_Write(SERVO_NEUTRAL);
    Veri_Kontrol.Servo_5_Write(SERVO_NEUTRAL);
    if (Veri) Veri.close();
    while (true);
  }

  // SD karta verileri 100ms'de bir kaydet
  if (now - last_log_time >= 100) {
    last_log_time = now;
    if (Veri) {
      Veri.print(gecen_sure, 2);
      Veri.print(",");
      Veri.print(yaw, 2);
      Veri.print(",");
      Veri.print(pitch, 2);
      Veri.print(",");
      Veri.println(roll, 2);
    }
  }

  // Telemetri
  Serial.print("Zaman: "); Serial.print(gecen_sure);
  Serial.print(" s | Yaw: "); Serial.print(yaw, 2);
  Serial.print(" | Pitch: "); Serial.print(pitch, 2);
  Serial.print(" | Roll: "); Serial.println(roll, 2);

  delay(20);
}

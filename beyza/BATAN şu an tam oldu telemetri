#include "ALACAKART.h"

ALACA_KART Veri_Kontrol;

// PWM sabitleri
const int MOTOR_MAX_PWM  = 1100;   // İleri hareket için maksimum PWM değeri
const int MOTOR_STOP_PWM = 1490;   // ESC'nin durduğu (stop) PWM değeri
const int MOTOR_DONUS_PWM = 1250;  // Dönüş esnasında kullanılan orta PWM değeri

// Sensör ve PID değişkenleri
float Pitch_Aci, Yaw_Aci;
float Gyro_y, Gyro_z;
float Ref_Pitch = 0;  // Hedef pitch açısı
float Ref_Yaw = 0;    // Hedef yaw açısı
float pid_hata_pitch = 0, pid_out_pitch = 0;
float pid_hata_yaw   = 0, pid_out_yaw   = 0;
float Kp_pitch = 0.1, Ki_pitch = 0.0, Kd_pitch = 0.005;
float Kp_yaw   = 0.1, Ki_yaw   = 0.0, Kd_yaw   = 0.005;
float imax = 10;
char komut = ' ';

// Motoru yavaşça hızlandırır (geri PWM mantığı)
void motorYavasArtir(int baslangic, int hedef) {
  for (int pwm = baslangic; pwm >= hedef; pwm -= 2) {
    Veri_Kontrol.Servo_1(pwm);
    delay(10);
  }
}

// Motoru yavaşça durdurur
void motorYavasAzalt(int baslangic, int hedef) {
  for (int pwm = baslangic; pwm <= hedef; pwm += 2) {
    Veri_Kontrol.Servo_1(pwm);
    delay(10);
  }
}

// Tüm yönlendirme servolarını nötr konuma getirir
void tumServolariNotrle() {
  Veri_Kontrol.Servo_2_Write(90);
  Veri_Kontrol.Servo_3_Write(90);
  Veri_Kontrol.Servo_4_Write(90);
  Veri_Kontrol.Servo_5_Write(90);
}

// Roketi yukarı çıkarır (2 saniyelik yüzeye yükselme)
void yukariCik() {
  Veri_Kontrol.Servo_2_Write(45);
  Veri_Kontrol.Servo_4_Write(135);
  Veri_Kontrol.Servo_1(MOTOR_MAX_PWM);
  delay(2000);
  tumServolariNotrle();
  delay(10);
}

// PID kontrol çıkışlarını hesaplayıp ilgili servolara uygular
void PID_Guncelle() {
  Pitch_Aci = Veri_Kontrol.Euler_Y();
  Yaw_Aci = Veri_Kontrol.Euler_Z();
  Gyro_y = Veri_Kontrol.GYRO_Y();
  Gyro_z = Veri_Kontrol.GYRO_Z();

  pid_hata_pitch = (Ref_Pitch - Pitch_Aci) * 5 - Gyro_y;
  pid_out_pitch = Veri_Kontrol.PID_2(pid_hata_pitch, Kp_pitch, Ki_pitch, Kd_pitch, imax);
  pid_hata_yaw = (Ref_Yaw - Yaw_Aci) * 5 - Gyro_z;
  pid_out_yaw = Veri_Kontrol.PID_1(pid_hata_yaw, Kp_yaw, Ki_yaw, Kd_yaw, imax);

  Veri_Kontrol.Servo_2_Write(90 + pid_out_pitch);
  Veri_Kontrol.Servo_4_Write(90 - pid_out_pitch);
  Veri_Kontrol.Servo_3_Write(90 + pid_out_yaw);
  Veri_Kontrol.Servo_5_Write(90 - pid_out_yaw);
}

// === Görev Fonksiyonları ===

// Görev A: Yüzeye çık → düz git (5sn) → dur
void gorev_a() {
  yukariCik();
  delay(5000);
  motorYavasAzalt(MOTOR_MAX_PWM, MOTOR_STOP_PWM);
tumServolariNotrle();
}

// Görev B: Yüzeye çık → düz git → sağa dön → düz git → dur
void gorev_b() {
  yukariCik();
  delay(3000);

  motorYavasAzalt(MOTOR_MAX_PWM, MOTOR_DONUS_PWM);
  Veri_Kontrol.Servo_3_Write(135);
  Veri_Kontrol.Servo_5_Write(45);
  delay(1500);

  motorYavasArtir(MOTOR_DONUS_PWM, MOTOR_MAX_PWM);
  tumServolariNotrle();
  delay(5000);
  motorYavasAzalt(MOTOR_MAX_PWM, MOTOR_STOP_PWM);
}

// Görev C: Yüzeye çık → düz git → sola dön → düz git → dur
void gorev_c() {
  yukariCik();
  delay(3000);

  motorYavasAzalt(MOTOR_MAX_PWM, MOTOR_DONUS_PWM);
  Veri_Kontrol.Servo_3_Write(45);
  Veri_Kontrol.Servo_5_Write(135);
  delay(1500);

  motorYavasArtir(MOTOR_DONUS_PWM, MOTOR_MAX_PWM);
  tumServolariNotrle();
  delay(5000);
  motorYavasAzalt(MOTOR_MAX_PWM, MOTOR_STOP_PWM);
}

// Görev D: Yüzeye çık → aşağı in → düz → yukarı çık → dur
void gorev_d() {
  yukariCik();
  
  Veri_Kontrol.Servo_2_Write(135);
  Veri_Kontrol.Servo_4_Write(45);
 
  delay(5000);

  Veri_Kontrol.Servo_2_Write(90);
  Veri_Kontrol.Servo_4_Write(90);
  delay(3000);

  Veri_Kontrol.Servo_2_Write(45);
  Veri_Kontrol.Servo_4_Write(135);
  delay(7000);
  motorYavasAzalt(MOTOR_MAX_PWM, MOTOR_STOP_PWM);
tumServolariNotrle();
}

// Görev E: Yüzeye çık → düz → aşağı in → dur
void gorev_e() {
  yukariCik();
  delay(3000);

  Veri_Kontrol.Servo_2_Write(135);
  Veri_Kontrol.Servo_4_Write(45);
  delay(5000);
  motorYavasAzalt(MOTOR_MAX_PWM, MOTOR_STOP_PWM);
tumServolariNotrle();
}

// Görev F: Yüzeye çık → düz → yukarı çık → dur
void gorev_f() {
  yukariCik();
  delay(3000);

  Veri_Kontrol.Servo_2_Write(45);
  Veri_Kontrol.Servo_4_Write(135);
  delay(5000);
  motorYavasAzalt(MOTOR_MAX_PWM, MOTOR_STOP_PWM);
tumServolariNotrle();
}

// Görev G: Yüzeye çık → düz → sağa dön → düz → dur
void gorev_g() {
  yukariCik();
  delay(5000);

  motorYavasAzalt(MOTOR_MAX_PWM, MOTOR_DONUS_PWM);
  Veri_Kontrol.Servo_3_Write(135);
  Veri_Kontrol.Servo_5_Write(45);
  delay(1500);

  motorYavasArtir(MOTOR_DONUS_PWM, MOTOR_MAX_PWM);
  tumServolariNotrle();
  delay(5000);
  motorYavasAzalt(MOTOR_MAX_PWM, MOTOR_STOP_PWM);
}

// Görev H: Kompozit görev (sola dön → sağa dön → yukarı çık → dur)
void gorev_h() {
  yukariCik();
  delay(5000);

  motorYavasAzalt(MOTOR_MAX_PWM, MOTOR_DONUS_PWM);
  Veri_Kontrol.Servo_3_Write(45);
  Veri_Kontrol.Servo_5_Write(135);
  delay(1500);

  motorYavasArtir(MOTOR_DONUS_PWM, MOTOR_MAX_PWM);
  tumServolariNotrle();
  delay(5000);

  motorYavasAzalt(MOTOR_MAX_PWM, MOTOR_DONUS_PWM);
  Veri_Kontrol.Servo_3_Write(135);
  Veri_Kontrol.Servo_5_Write(45);
  delay(1500);

  motorYavasArtir(MOTOR_DONUS_PWM, MOTOR_MAX_PWM);
  tumServolariNotrle();
  delay(5000);

  Veri_Kontrol.Servo_2_Write(45);
  Veri_Kontrol.Servo_4_Write(135);
  delay(5000);

  motorYavasAzalt(MOTOR_MAX_PWM, MOTOR_STOP_PWM);
tumServolariNotrle();
}

// === Kurulum Fonksiyonu ===
void setup() {
  Serial1.begin(57600);
  Veri_Kontrol.Sensor_begin();
  Veri_Kontrol.Servo_1_begin();
  Veri_Kontrol.Servo_2_begin();
  Veri_Kontrol.Servo_3_begin();
  Veri_Kontrol.Servo_4_begin();
  Veri_Kontrol.Servo_5_begin();
  Veri_Kontrol.setup_PID_1();
  Veri_Kontrol.setup_PID_2();
}

// Ana döngü: Gelen komuta göre görevi çalıştır
void loop() {
  if (Serial1.available()) {
    komut = Serial1.read();
  }

  switch (komut) {
    case 'a': gorev_a(); break;
    case 'b': gorev_b(); break;
    case 'c': gorev_c(); break;
    case 'd': gorev_d(); break;
    case 'e': gorev_e(); break;
    case 'f': gorev_f(); break;
    case 'g': gorev_g(); break;
    case 'h': gorev_h(); break;
    default: PID_Guncelle(); break; // Komut yoksa PID kontrol çalışır
  }

  delay(10);
}

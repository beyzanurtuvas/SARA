/*
  - İlk 10 saniye bekleme (motor durur)
  - 2 saniye düz ilerleme
  - 5 saniye sağa dönüş (yaw kontrol)
  - 5 saniye sola dönüş
  - Ardından yunuslama hareketi:
      - 2 saniye aşağı eğim (dalış)
      - 2 saniye nötr pozisyon (düzleşme)
      - 2 saniye yukarı eğim (yüzeye çıkış)
  - Her motor çalıştırma ve durdurma adımı yumuşak (kademeli)
  - Yaw ve pitch kontrolü PID ile yapılır
*/


#include "ALACAKART.h"
#include <SPI.h>
#include <SD.h>

ALACA_KART Veri_Kontrol;
File Veri;

// Sabitler
const int CS_SD = PA4;
const int SERVO_NEUTRAL = 90;
const int SERVO_LEFT = 45;
const int SERVO_RIGHT = 135;
const int MOTOR_RUN_PWM = 1000;   // Maksimum hız
const int MOTOR_STOP_PWM = 1490;  // Durma PWM

unsigned long baslangic = 0;

// PID Sabitleri
float Ref_Pitch = 0;
float Ref_Yaw = 0;
float pid_hata_pitch = 0, pid_out_pitch = 0;
float pid_hata_yaw = 0, pid_out_yaw = 0;
float Kp_pitch = 0.1, Ki_pitch = 0.0, Kd_pitch = 0.005;
float Kp_yaw   = 0.1, Ki_yaw   = 0.0, Kd_yaw   = 0.005;
float imax = 10;

void setup() {
  Serial.begin(57600);
  Veri_Kontrol.Sensor_begin();

  // Servo pinleri başlat
  Veri_Kontrol.Servo_1_begin(); // ESC
  Veri_Kontrol.Servo_2_begin(); // Pitch ön
  Veri_Kontrol.Servo_3_begin(); // Yaw ön
  Veri_Kontrol.Servo_4_begin(); // Pitch arka
  Veri_Kontrol.Servo_5_begin(); // Yaw arka

  // PID sistemleri başlat
  Veri_Kontrol.setup_PID_1(); // Yaw PID
  Veri_Kontrol.setup_PID_2(); // Pitch PID

  // SD Kart başlat (opsiyonel)
  SPI.begin();
  if (SD.begin(CS_SD)) {
    Veri = SD.open("Veriler.txt", FILE_WRITE);
    if (Veri) Veri.println("Zaman,Pitch,Yaw,Out_Pitch,Out_Yaw");
  }

  baslangic = millis();
}

void loop() {
  unsigned long simdi = millis();
  float sure = (simdi - baslangic) / 1000.0;

  // IMU Verilerini al
  float Pitch_Aci = Veri_Kontrol.Euler_Y();
  float Yaw_Aci = Veri_Kontrol.Euler_Z();
  float Gyro_y = Veri_Kontrol.GYRO_Y();
  float Gyro_z = Veri_Kontrol.GYRO_Z();

  // PID Hesapla
  pid_hata_pitch = (Ref_Pitch - Pitch_Aci) * 5 - Gyro_y;
  pid_out_pitch = Veri_Kontrol.PID_2(pid_hata_pitch, Kp_pitch, Ki_pitch, Kd_pitch, imax);

  pid_hata_yaw = (Ref_Yaw - Yaw_Aci) * 5 - Gyro_z;
  pid_out_yaw = Veri_Kontrol.PID_1(pid_hata_yaw, Kp_yaw, Ki_yaw, Kd_yaw, imax);

  // Servo Çıkışları
  Veri_Kontrol.Servo_2_Write(90 + pid_out_pitch); // Pitch ön
  Veri_Kontrol.Servo_4_Write(90 - pid_out_pitch); // Pitch arka
  Veri_Kontrol.Servo_3_Write(90 + pid_out_yaw);   // Yaw ön
  Veri_Kontrol.Servo_5_Write(90 - pid_out_yaw);   // Yaw arka

  // Görev zamanlaması
  if (sure < 10) {
    Veri_Kontrol.Servo_1(MOTOR_STOP_PWM); // Başlangıçta bekle
  } else if (sure >= 10 && sure < 12) {
    motorYavasArtir(MOTOR_STOP_PWM, MOTOR_RUN_PWM);
  } else if (sure >= 12 && sure < 14) {
    Veri_Kontrol.Servo_1(MOTOR_RUN_PWM); // Düz git
  } else if (sure >= 14 && sure < 15) {
    motorYavasAzalt(MOTOR_RUN_PWM, MOTOR_STOP_PWM);
  } else if (sure >= 15 && sure < 16) {
    motorYavasArtir(MOTOR_STOP_PWM, MOTOR_RUN_PWM);
  } else if (sure >= 16 && sure < 21) {
    Veri_Kontrol.Servo_1(MOTOR_RUN_PWM);
    Ref_Yaw = -30; // Sağa dönüş için yaw hedefi
  } else if (sure >= 21 && sure < 22) {
    motorYavasAzalt(MOTOR_RUN_PWM, MOTOR_STOP_PWM);
    Ref_Yaw = 0;
  } else if (sure >= 22 && sure < 23) {
    motorYavasArtir(MOTOR_STOP_PWM, MOTOR_RUN_PWM);
  } else if (sure >= 23 && sure < 28) {
    Veri_Kontrol.Servo_1(MOTOR_RUN_PWM);
    Ref_Yaw = 30; // Sola dönüş için yaw hedefi
  } else if (sure >= 28 && sure < 29) {
    motorYavasAzalt(MOTOR_RUN_PWM, MOTOR_STOP_PWM);
    Ref_Yaw = 0;
  } else if (sure >= 29 && sure < 30) {
    motorYavasArtir(MOTOR_STOP_PWM, MOTOR_RUN_PWM);
  } else if (sure >= 30 && sure < 32) {
    Ref_Pitch = -15; // Aşağı (dalış)
  } else if (sure >= 32 && sure < 34) {
    Ref_Pitch = 0; // Düzleşme
  } else if (sure >= 34 && sure < 36) {
    Ref_Pitch = 15; // Yukarı (yüzeye çık)
  } else if (sure >= 36) {
    motorYavasAzalt(MOTOR_RUN_PWM, MOTOR_STOP_PWM);
    Ref_Pitch = 0;
    Ref_Yaw = 0;
    tumServolariNotrle();
    if (Veri) Veri.close();
    Serial.println(">>> Görev tamamlandı.");
    while (true);
  }

  // Seri çıktı
  Serial.print("Zaman: "); Serial.print(sure, 2);
  Serial.print(" | Pitch: "); Serial.print(Pitch_Aci, 2);
  Serial.print(" | Yaw: "); Serial.print(Yaw_Aci, 2);
  Serial.print(" | OutP: "); Serial.print(pid_out_pitch, 2);
  Serial.print(" | OutY: "); Serial.println(pid_out_yaw, 2);

  // Log yaz (opsiyonel)
  if (Veri) {
    Veri.print(sure, 2); Veri.print(",");
    Veri.print(Pitch_Aci, 2); Veri.print(",");
    Veri.print(Yaw_Aci, 2); Veri.print(",");
    Veri.print(pid_out_pitch, 2); Veri.print(",");
    Veri.println(pid_out_yaw, 2);
  }

  delay(20);
}

// Motor PWM’ini kademeli artır
void motorYavasArtir(int baslangicPWM, int hedefPWM) {
  for (int pwm = baslangicPWM; pwm >= hedefPWM; pwm -= 2) {
    Veri_Kontrol.Servo_1(pwm);
    delay(10);
  }
}

// Motor PWM’ini kademeli azalt
void motorYavasAzalt(int baslangicPWM, int hedefPWM) {
  for (int pwm = baslangicPWM; pwm <= hedefPWM; pwm += 2) {
    Veri_Kontrol.Servo_1(pwm);
    delay(10);
  }
}

// Tüm servoları nötrle
void tumServolariNotrle() {
  Veri_Kontrol.Servo_2_Write(SERVO_NEUTRAL);
  Veri_Kontrol.Servo_3_Write(SERVO_NEUTRAL);
  Veri_Kontrol.Servo_4_Write(SERVO_NEUTRAL);
  Veri_Kontrol.Servo_5_Write(SERVO_NEUTRAL);
}

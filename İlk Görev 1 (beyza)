// ALACAKART Kontrollü PID Sistemli Sualtı Aracı Kodu
#include "ALACAKART.h"
#include <PID_v1.h>
#include <MadgwickAHRS.h>
#include <SPI.h>
#include <SD.h>

ALACA_KART Veri_Kontrol;
Madgwick filter;

// PID Ayarları
// Derinlik PID
double depthSetpoint = 1.5, depthInput, depthOutput;
PID depthPID(&depthInput, &depthOutput, &depthSetpoint, 6.0, 0.02, 2.0, DIRECT);

// Servo ve PWM Sabitleri
const int SERVO_NEUTRAL = 90;
const int SERVO_MIN = 0;
const int SERVO_MAX = 180;
const int MOTOR_STOP_PWM = 1490;
const int MOTOR_RUN_PWM = 1000;
const int MOTOR_TURN_PWM = 1250;  // Dönüşlerde hafif PWM

// Zamanlayıcılar
unsigned long startTime = 0;
unsigned long logTime = 0;

// SD kart
File Veri;
const int CS_SD = PA4;

// Yardımcı fonksiyon: servo açısını sınırla ve uygula
void setServo(int pin, int value) {
  value = constrain(value, SERVO_MIN, SERVO_MAX);
  switch (pin) {
    case 1: Veri_Kontrol.Servo_1(value); break; // ESC için
    case 2: Veri_Kontrol.Servo_2_Write(value); break;
    case 3: Veri_Kontrol.Servo_3_Write(value); break;
    case 4: Veri_Kontrol.Servo_4_Write(value); break;
    case 5: Veri_Kontrol.Servo_5_Write(value); break;
    default: break;
  }
}

void setup() {
  Serial.begin(57600);
  Veri_Kontrol.Sensor_begin();

  // Servo başlat
  Veri_Kontrol.Servo_1_begin(); // ESC
  Veri_Kontrol.Servo_2_begin(); // Depth sol
  Veri_Kontrol.Servo_3_begin(); // Yaw üst
  Veri_Kontrol.Servo_4_begin(); // Depth sağ
  Veri_Kontrol.Servo_5_begin(); // Yaw alt

  // ESC yavaş başlatma
  for (int pwm = 1490; pwm >= 1200; pwm -= 2) {
    Veri_Kontrol.Servo_1(pwm);
    delay(10);
  }

  // PID başlat
  depthPID.SetMode(AUTOMATIC);
  depthPID.SetOutputLimits(-30, 30);

  // SD kart
  SPI.begin();
  SD.begin(CS_SD);
  Veri = SD.open("veri_log.csv", FILE_WRITE);
  if (Veri) Veri.println("Zaman,Derinlik,PIDOut,Servo2,Servo4,MotorPWM,Kp,Ki,Kd");

  startTime = millis();
}

void loop() {
  unsigned long now = millis();
  float elapsed = (now - startTime) / 1000.0;

  // Derinlik oku
  depthInput = Veri_Kontrol.Alt();
  depthPID.Compute();

  // Derinlik servolarını ayarla (Servo_2 sol, Servo_4 sağ)
  int servo2 = constrain(SERVO_NEUTRAL + depthOutput, SERVO_MIN, SERVO_MAX);
  int servo4 = constrain(SERVO_NEUTRAL - depthOutput, SERVO_MIN, SERVO_MAX);
  setServo(2, servo2);
  setServo(4, servo4);

  // Görev senaryosu
  int motor_pwm = MOTOR_STOP_PWM;
  if (elapsed < 10) {
    // Bekleme süreci
    motor_pwm = MOTOR_STOP_PWM;
  } else if (elapsed < 20) {
    // Düz ilerleme
    motor_pwm = MOTOR_RUN_PWM;
    setServo(3, SERVO_NEUTRAL);
    setServo(5, SERVO_NEUTRAL);
  } else if (elapsed < 25) {
    // 90 derece sağa dönme (arka üst-alt yaw kullanılır)
    motor_pwm = MOTOR_TURN_PWM;
    setServo(3, 60); // Üst yaw sağa
    setServo(5, 120); // Alt yaw sola
  } else if (elapsed < 30) {
    // 5 sn ileri
    motor_pwm = MOTOR_RUN_PWM;
    setServo(3, SERVO_NEUTRAL);
    setServo(5, SERVO_NEUTRAL);
  } else if (elapsed < 35) {
    // Tekrar 90 derece sağa dön
    motor_pwm = MOTOR_TURN_PWM;
    setServo(3, 60);
    setServo(5, 120);
  } else if (elapsed < 40) {
    // 5 sn dalış
    motor_pwm = MOTOR_RUN_PWM;
    setServo(2, 60);
    setServo(4, 120);
  } else if (elapsed < 45) {
    // 5 sn yukarı çıkış
    motor_pwm = MOTOR_RUN_PWM;
    setServo(2, 120);
    setServo(4, 60);
  } else {
    motor_pwm = MOTOR_STOP_PWM;
    setServo(3, SERVO_NEUTRAL);
    setServo(5, SERVO_NEUTRAL);
  }

  Veri_Kontrol.Servo_1(motor_pwm);

  // SD karta kaydet
  if (millis() - logTime >= 100) {
    if (Veri) {
      Veri.print(elapsed, 2); Veri.print(",");
      Veri.print(depthInput, 2); Veri.print(",");
      Veri.print(depthOutput, 2); Veri.print(",");
      Veri.print(servo2); Veri.print(",");
      Veri.print(servo4); Veri.print(",");
      Veri.print(motor_pwm); Veri.print(",");
      Veri.print(depthPID.GetKp()); Veri.print(",");
      Veri.print(depthPID.GetKi()); Veri.print(",");
      Veri.println(depthPID.GetKd());
    }
    logTime = millis();
  }

  delay(20);
}

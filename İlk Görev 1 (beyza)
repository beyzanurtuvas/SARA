
#include "ALACAKART.h"
#include <PID_v1.h>
#include <MadgwickAHRS.h>

ALACA_KART Veri_Kontrol;
Madgwick filter;

double rollSetpoint = 0.0, rollInput, rollOutput;
double pitchSetpoint = 0.0, pitchInput, pitchOutput;
double yawSetpoint = 0.0, yawInput, yawOutput;
double depthSetpoint = 1.5, depthInput, depthOutput;

PID rollPID(&rollInput, &rollOutput, &rollSetpoint, 5.0, 0.01, 1.0, DIRECT);
PID pitchPID(&pitchInput, &pitchOutput, &pitchSetpoint, 5.0, 0.01, 1.0, DIRECT);
PID yawPID(&yawInput, &yawOutput, &yawSetpoint, 4.0, 0.01, 2.0, DIRECT);
PID depthPID(&depthInput, &depthOutput, &depthSetpoint, 6.0, 0.02, 2.0, DIRECT);

const int SERVO_NEUTRAL = 90;
const int SERVO_MIN = 0;
const int SERVO_MAX = 180;

unsigned long baslangic_zamani;
int motor_pwm = 1490; // Başlangıçta motor duracak şekilde
const int hedef_pwm = 1000; // Artık 1000 bizim maksimum hızımız oldu

void setup() {
  Serial.begin(57600);
  Veri_Kontrol.Sensor_begin();

  Veri_Kontrol.Servo_1_begin(); // ESC
  Veri_Kontrol.Servo_2_begin(); // Roll sol
  Veri_Kontrol.Servo_3_begin(); // Pitch ön
  Veri_Kontrol.Servo_4_begin(); // Roll sağ
  Veri_Kontrol.Servo_5_begin(); // Pitch arka

  Serial.println(">>> ESC PWM yavaşça artırılıyor...");
  for (int pwm = 1490; pwm >= 1200; pwm -= 2) {
    Veri_Kontrol.Servo_1(pwm);
    delay(10);
  }

  rollPID.SetMode(AUTOMATIC);
  pitchPID.SetMode(AUTOMATIC);
  yawPID.SetMode(AUTOMATIC);
  depthPID.SetMode(AUTOMATIC);

  rollPID.SetOutputLimits(-30, 30);
  pitchPID.SetOutputLimits(-30, 30);
  yawPID.SetOutputLimits(-30, 30);
  depthPID.SetOutputLimits(-15, 15);

  baslangic_zamani = millis();
}

void loop() {
  unsigned long now = millis();
  float dt = 0.02;
  float gecen_sure = (now - baslangic_zamani) / 1000.0;

  float ax = Veri_Kontrol.LIA_ACC_X();
  float ay = Veri_Kontrol.LIA_ACC_Y();
  float az = Veri_Kontrol.LIA_ACC_Z();
  float gx = Veri_Kontrol.GYRO_X();
  float gy = Veri_Kontrol.GYRO_Y();
  float gz = Veri_Kontrol.GYRO_Z();

  filter.updateIMU(gx, gy, gz, ax, ay, az);
  rollInput = filter.getRoll();
  pitchInput = filter.getPitch();
  yawInput = filter.getYaw();
  depthInput = 1.5 - Veri_Kontrol.Alt();

  rollPID.Compute();
  pitchPID.Compute();
  yawPID.Compute();
  depthPID.Compute();

  int servoRollSol = constrain(SERVO_NEUTRAL + rollOutput + yawOutput, SERVO_MIN, SERVO_MAX);
  int servoRollSag = constrain(SERVO_NEUTRAL - rollOutput - yawOutput, SERVO_MIN, SERVO_MAX);
  int servoPitchOn = constrain(SERVO_NEUTRAL + pitchOutput + depthOutput, SERVO_MIN, SERVO_MAX);
  int servoPitchArka = constrain(SERVO_NEUTRAL - pitchOutput - depthOutput, SERVO_MIN, SERVO_MAX);

  Veri_Kontrol.Servo_2(servoRollSol);
  Veri_Kontrol.Servo_4(servoRollSag);
  Veri_Kontrol.Servo_3(servoPitchOn);
  Veri_Kontrol.Servo_5(servoPitchArka);

  if (gecen_sure < 15) {
    motor_pwm = 1490;
  } else if (gecen_sure < 25) {
    yawSetpoint = yawInput;
    motor_pwm = hedef_pwm;
  } else if (gecen_sure < 30) {
    yawSetpoint = yawInput + 90;
    Veri_Kontrol.Servo_3(60);
    Veri_Kontrol.Servo_5(120);
  } else if (gecen_sure < 35) {
    yawSetpoint = yawInput + 90;
    motor_pwm = hedef_pwm;
  } else {
    depthSetpoint = 0.0;
    Veri_Kontrol.Servo_3(60);
    Veri_Kontrol.Servo_5(120);
    if (Veri_Kontrol.Alt() < 0.2) {
      motor_pwm = 1490;
    }
  }

  Veri_Kontrol.Servo_1(motor_pwm);

  Serial.print("Zaman: "); Serial.print(gecen_sure);
  Serial.print(" s | Derinlik: "); Serial.print(Veri_Kontrol.Alt(), 2);
  Serial.print(" m | Yaw: "); Serial.print(yawInput);
  Serial.print(" | PWM: "); Serial.println(motor_pwm);
  delay(20);
}
